// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neteq_unittest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_neteq_5funittest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_neteq_5funittest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_neteq_5funittest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_neteq_5funittest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace webrtc {
namespace neteq_unittest {
class NetEqNetworkStatistics;
class NetEqNetworkStatisticsDefaultTypeInternal;
extern NetEqNetworkStatisticsDefaultTypeInternal _NetEqNetworkStatistics_default_instance_;
class RtcpStatistics;
class RtcpStatisticsDefaultTypeInternal;
extern RtcpStatisticsDefaultTypeInternal _RtcpStatistics_default_instance_;
}  // namespace neteq_unittest
}  // namespace webrtc
PROTOBUF_NAMESPACE_OPEN
template<> ::webrtc::neteq_unittest::NetEqNetworkStatistics* Arena::CreateMaybeMessage<::webrtc::neteq_unittest::NetEqNetworkStatistics>(Arena*);
template<> ::webrtc::neteq_unittest::RtcpStatistics* Arena::CreateMaybeMessage<::webrtc::neteq_unittest::RtcpStatistics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace webrtc {
namespace neteq_unittest {

// ===================================================================

class NetEqNetworkStatistics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.neteq_unittest.NetEqNetworkStatistics) */ {
 public:
  NetEqNetworkStatistics();
  virtual ~NetEqNetworkStatistics();

  NetEqNetworkStatistics(const NetEqNetworkStatistics& from);
  NetEqNetworkStatistics(NetEqNetworkStatistics&& from) noexcept
    : NetEqNetworkStatistics() {
    *this = ::std::move(from);
  }

  inline NetEqNetworkStatistics& operator=(const NetEqNetworkStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetEqNetworkStatistics& operator=(NetEqNetworkStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NetEqNetworkStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetEqNetworkStatistics* internal_default_instance() {
    return reinterpret_cast<const NetEqNetworkStatistics*>(
               &_NetEqNetworkStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetEqNetworkStatistics& a, NetEqNetworkStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(NetEqNetworkStatistics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetEqNetworkStatistics* New() const final {
    return CreateMaybeMessage<NetEqNetworkStatistics>(nullptr);
  }

  NetEqNetworkStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetEqNetworkStatistics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NetEqNetworkStatistics& from);
  void MergeFrom(const NetEqNetworkStatistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetEqNetworkStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.neteq_unittest.NetEqNetworkStatistics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentBufferSizeMsFieldNumber = 1,
    kPreferredBufferSizeMsFieldNumber = 2,
    kJitterPeaksFoundFieldNumber = 3,
    kPacketLossRateFieldNumber = 4,
    kPacketDiscardRateFieldNumber = 5,
    kExpandRateFieldNumber = 6,
    kSpeechExpandRateFieldNumber = 7,
    kPreemptiveRateFieldNumber = 8,
    kAccelerateRateFieldNumber = 9,
    kSecondaryDecodedRateFieldNumber = 10,
    kAddedZeroSamplesFieldNumber = 12,
    kClockdriftPpmFieldNumber = 11,
    kMeanWaitingTimeMsFieldNumber = 13,
    kMedianWaitingTimeMsFieldNumber = 14,
    kMinWaitingTimeMsFieldNumber = 15,
    kMaxWaitingTimeMsFieldNumber = 16,
    kSecondaryDiscardedRateFieldNumber = 17,
  };
  // optional uint32 current_buffer_size_ms = 1;
  bool has_current_buffer_size_ms() const;
  void clear_current_buffer_size_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 current_buffer_size_ms() const;
  void set_current_buffer_size_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 preferred_buffer_size_ms = 2;
  bool has_preferred_buffer_size_ms() const;
  void clear_preferred_buffer_size_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 preferred_buffer_size_ms() const;
  void set_preferred_buffer_size_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 jitter_peaks_found = 3;
  bool has_jitter_peaks_found() const;
  void clear_jitter_peaks_found();
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_peaks_found() const;
  void set_jitter_peaks_found(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 packet_loss_rate = 4;
  bool has_packet_loss_rate() const;
  void clear_packet_loss_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_loss_rate() const;
  void set_packet_loss_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 packet_discard_rate = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_packet_discard_rate() const;
  PROTOBUF_DEPRECATED void clear_packet_discard_rate();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 packet_discard_rate() const;
  PROTOBUF_DEPRECATED void set_packet_discard_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 expand_rate = 6;
  bool has_expand_rate() const;
  void clear_expand_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 expand_rate() const;
  void set_expand_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 speech_expand_rate = 7;
  bool has_speech_expand_rate() const;
  void clear_speech_expand_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 speech_expand_rate() const;
  void set_speech_expand_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 preemptive_rate = 8;
  bool has_preemptive_rate() const;
  void clear_preemptive_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 preemptive_rate() const;
  void set_preemptive_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 accelerate_rate = 9;
  bool has_accelerate_rate() const;
  void clear_accelerate_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 accelerate_rate() const;
  void set_accelerate_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 secondary_decoded_rate = 10;
  bool has_secondary_decoded_rate() const;
  void clear_secondary_decoded_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondary_decoded_rate() const;
  void set_secondary_decoded_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 added_zero_samples = 12;
  bool has_added_zero_samples() const;
  void clear_added_zero_samples();
  ::PROTOBUF_NAMESPACE_ID::uint64 added_zero_samples() const;
  void set_added_zero_samples(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 clockdrift_ppm = 11;
  bool has_clockdrift_ppm() const;
  void clear_clockdrift_ppm();
  ::PROTOBUF_NAMESPACE_ID::int32 clockdrift_ppm() const;
  void set_clockdrift_ppm(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 mean_waiting_time_ms = 13;
  bool has_mean_waiting_time_ms() const;
  void clear_mean_waiting_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 mean_waiting_time_ms() const;
  void set_mean_waiting_time_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 median_waiting_time_ms = 14;
  bool has_median_waiting_time_ms() const;
  void clear_median_waiting_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 median_waiting_time_ms() const;
  void set_median_waiting_time_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 min_waiting_time_ms = 15;
  bool has_min_waiting_time_ms() const;
  void clear_min_waiting_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 min_waiting_time_ms() const;
  void set_min_waiting_time_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 max_waiting_time_ms = 16;
  bool has_max_waiting_time_ms() const;
  void clear_max_waiting_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 max_waiting_time_ms() const;
  void set_max_waiting_time_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 secondary_discarded_rate = 17;
  bool has_secondary_discarded_rate() const;
  void clear_secondary_discarded_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondary_discarded_rate() const;
  void set_secondary_discarded_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.neteq_unittest.NetEqNetworkStatistics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_buffer_size_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 preferred_buffer_size_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_peaks_found_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_loss_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_discard_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expand_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 speech_expand_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 preemptive_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accelerate_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondary_decoded_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 added_zero_samples_;
  ::PROTOBUF_NAMESPACE_ID::int32 clockdrift_ppm_;
  ::PROTOBUF_NAMESPACE_ID::int32 mean_waiting_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 median_waiting_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_waiting_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_waiting_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondary_discarded_rate_;
  friend struct ::TableStruct_neteq_5funittest_2eproto;
};
// -------------------------------------------------------------------

class RtcpStatistics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.neteq_unittest.RtcpStatistics) */ {
 public:
  RtcpStatistics();
  virtual ~RtcpStatistics();

  RtcpStatistics(const RtcpStatistics& from);
  RtcpStatistics(RtcpStatistics&& from) noexcept
    : RtcpStatistics() {
    *this = ::std::move(from);
  }

  inline RtcpStatistics& operator=(const RtcpStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcpStatistics& operator=(RtcpStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RtcpStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtcpStatistics* internal_default_instance() {
    return reinterpret_cast<const RtcpStatistics*>(
               &_RtcpStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RtcpStatistics& a, RtcpStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcpStatistics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtcpStatistics* New() const final {
    return CreateMaybeMessage<RtcpStatistics>(nullptr);
  }

  RtcpStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtcpStatistics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RtcpStatistics& from);
  void MergeFrom(const RtcpStatistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RtcpStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.neteq_unittest.RtcpStatistics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFractionLostFieldNumber = 1,
    kCumulativeLostFieldNumber = 2,
    kExtendedMaxSequenceNumberFieldNumber = 3,
    kJitterFieldNumber = 4,
  };
  // optional uint32 fraction_lost = 1;
  bool has_fraction_lost() const;
  void clear_fraction_lost();
  ::PROTOBUF_NAMESPACE_ID::uint32 fraction_lost() const;
  void set_fraction_lost(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 cumulative_lost = 2;
  bool has_cumulative_lost() const;
  void clear_cumulative_lost();
  ::PROTOBUF_NAMESPACE_ID::uint32 cumulative_lost() const;
  void set_cumulative_lost(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 extended_max_sequence_number = 3;
  bool has_extended_max_sequence_number() const;
  void clear_extended_max_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 extended_max_sequence_number() const;
  void set_extended_max_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 jitter = 4;
  bool has_jitter() const;
  void clear_jitter();
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter() const;
  void set_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.neteq_unittest.RtcpStatistics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fraction_lost_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cumulative_lost_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extended_max_sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_;
  friend struct ::TableStruct_neteq_5funittest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetEqNetworkStatistics

// optional uint32 current_buffer_size_ms = 1;
inline bool NetEqNetworkStatistics::has_current_buffer_size_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetEqNetworkStatistics::clear_current_buffer_size_ms() {
  current_buffer_size_ms_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetEqNetworkStatistics::current_buffer_size_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.current_buffer_size_ms)
  return current_buffer_size_ms_;
}
inline void NetEqNetworkStatistics::set_current_buffer_size_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  current_buffer_size_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.current_buffer_size_ms)
}

// optional uint32 preferred_buffer_size_ms = 2;
inline bool NetEqNetworkStatistics::has_preferred_buffer_size_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetEqNetworkStatistics::clear_preferred_buffer_size_ms() {
  preferred_buffer_size_ms_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetEqNetworkStatistics::preferred_buffer_size_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.preferred_buffer_size_ms)
  return preferred_buffer_size_ms_;
}
inline void NetEqNetworkStatistics::set_preferred_buffer_size_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  preferred_buffer_size_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.preferred_buffer_size_ms)
}

// optional uint32 jitter_peaks_found = 3;
inline bool NetEqNetworkStatistics::has_jitter_peaks_found() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetEqNetworkStatistics::clear_jitter_peaks_found() {
  jitter_peaks_found_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetEqNetworkStatistics::jitter_peaks_found() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.jitter_peaks_found)
  return jitter_peaks_found_;
}
inline void NetEqNetworkStatistics::set_jitter_peaks_found(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  jitter_peaks_found_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.jitter_peaks_found)
}

// optional uint32 packet_loss_rate = 4;
inline bool NetEqNetworkStatistics::has_packet_loss_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetEqNetworkStatistics::clear_packet_loss_rate() {
  packet_loss_rate_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetEqNetworkStatistics::packet_loss_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.packet_loss_rate)
  return packet_loss_rate_;
}
inline void NetEqNetworkStatistics::set_packet_loss_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  packet_loss_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.packet_loss_rate)
}

// optional uint32 packet_discard_rate = 5 [deprecated = true];
inline bool NetEqNetworkStatistics::has_packet_discard_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetEqNetworkStatistics::clear_packet_discard_rate() {
  packet_discard_rate_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetEqNetworkStatistics::packet_discard_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.packet_discard_rate)
  return packet_discard_rate_;
}
inline void NetEqNetworkStatistics::set_packet_discard_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  packet_discard_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.packet_discard_rate)
}

// optional uint32 expand_rate = 6;
inline bool NetEqNetworkStatistics::has_expand_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetEqNetworkStatistics::clear_expand_rate() {
  expand_rate_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetEqNetworkStatistics::expand_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.expand_rate)
  return expand_rate_;
}
inline void NetEqNetworkStatistics::set_expand_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  expand_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.expand_rate)
}

// optional uint32 speech_expand_rate = 7;
inline bool NetEqNetworkStatistics::has_speech_expand_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetEqNetworkStatistics::clear_speech_expand_rate() {
  speech_expand_rate_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetEqNetworkStatistics::speech_expand_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.speech_expand_rate)
  return speech_expand_rate_;
}
inline void NetEqNetworkStatistics::set_speech_expand_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  speech_expand_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.speech_expand_rate)
}

// optional uint32 preemptive_rate = 8;
inline bool NetEqNetworkStatistics::has_preemptive_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetEqNetworkStatistics::clear_preemptive_rate() {
  preemptive_rate_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetEqNetworkStatistics::preemptive_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.preemptive_rate)
  return preemptive_rate_;
}
inline void NetEqNetworkStatistics::set_preemptive_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  preemptive_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.preemptive_rate)
}

// optional uint32 accelerate_rate = 9;
inline bool NetEqNetworkStatistics::has_accelerate_rate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NetEqNetworkStatistics::clear_accelerate_rate() {
  accelerate_rate_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetEqNetworkStatistics::accelerate_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.accelerate_rate)
  return accelerate_rate_;
}
inline void NetEqNetworkStatistics::set_accelerate_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  accelerate_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.accelerate_rate)
}

// optional uint32 secondary_decoded_rate = 10;
inline bool NetEqNetworkStatistics::has_secondary_decoded_rate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NetEqNetworkStatistics::clear_secondary_decoded_rate() {
  secondary_decoded_rate_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetEqNetworkStatistics::secondary_decoded_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.secondary_decoded_rate)
  return secondary_decoded_rate_;
}
inline void NetEqNetworkStatistics::set_secondary_decoded_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  secondary_decoded_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.secondary_decoded_rate)
}

// optional uint32 secondary_discarded_rate = 17;
inline bool NetEqNetworkStatistics::has_secondary_discarded_rate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NetEqNetworkStatistics::clear_secondary_discarded_rate() {
  secondary_discarded_rate_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetEqNetworkStatistics::secondary_discarded_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.secondary_discarded_rate)
  return secondary_discarded_rate_;
}
inline void NetEqNetworkStatistics::set_secondary_discarded_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  secondary_discarded_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.secondary_discarded_rate)
}

// optional int32 clockdrift_ppm = 11;
inline bool NetEqNetworkStatistics::has_clockdrift_ppm() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NetEqNetworkStatistics::clear_clockdrift_ppm() {
  clockdrift_ppm_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetEqNetworkStatistics::clockdrift_ppm() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.clockdrift_ppm)
  return clockdrift_ppm_;
}
inline void NetEqNetworkStatistics::set_clockdrift_ppm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  clockdrift_ppm_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.clockdrift_ppm)
}

// optional uint64 added_zero_samples = 12;
inline bool NetEqNetworkStatistics::has_added_zero_samples() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NetEqNetworkStatistics::clear_added_zero_samples() {
  added_zero_samples_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetEqNetworkStatistics::added_zero_samples() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.added_zero_samples)
  return added_zero_samples_;
}
inline void NetEqNetworkStatistics::set_added_zero_samples(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  added_zero_samples_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.added_zero_samples)
}

// optional int32 mean_waiting_time_ms = 13;
inline bool NetEqNetworkStatistics::has_mean_waiting_time_ms() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NetEqNetworkStatistics::clear_mean_waiting_time_ms() {
  mean_waiting_time_ms_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetEqNetworkStatistics::mean_waiting_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.mean_waiting_time_ms)
  return mean_waiting_time_ms_;
}
inline void NetEqNetworkStatistics::set_mean_waiting_time_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  mean_waiting_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.mean_waiting_time_ms)
}

// optional int32 median_waiting_time_ms = 14;
inline bool NetEqNetworkStatistics::has_median_waiting_time_ms() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NetEqNetworkStatistics::clear_median_waiting_time_ms() {
  median_waiting_time_ms_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetEqNetworkStatistics::median_waiting_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.median_waiting_time_ms)
  return median_waiting_time_ms_;
}
inline void NetEqNetworkStatistics::set_median_waiting_time_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  median_waiting_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.median_waiting_time_ms)
}

// optional int32 min_waiting_time_ms = 15;
inline bool NetEqNetworkStatistics::has_min_waiting_time_ms() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NetEqNetworkStatistics::clear_min_waiting_time_ms() {
  min_waiting_time_ms_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetEqNetworkStatistics::min_waiting_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.min_waiting_time_ms)
  return min_waiting_time_ms_;
}
inline void NetEqNetworkStatistics::set_min_waiting_time_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  min_waiting_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.min_waiting_time_ms)
}

// optional int32 max_waiting_time_ms = 16;
inline bool NetEqNetworkStatistics::has_max_waiting_time_ms() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NetEqNetworkStatistics::clear_max_waiting_time_ms() {
  max_waiting_time_ms_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetEqNetworkStatistics::max_waiting_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.max_waiting_time_ms)
  return max_waiting_time_ms_;
}
inline void NetEqNetworkStatistics::set_max_waiting_time_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  max_waiting_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.max_waiting_time_ms)
}

// -------------------------------------------------------------------

// RtcpStatistics

// optional uint32 fraction_lost = 1;
inline bool RtcpStatistics::has_fraction_lost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtcpStatistics::clear_fraction_lost() {
  fraction_lost_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtcpStatistics::fraction_lost() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.RtcpStatistics.fraction_lost)
  return fraction_lost_;
}
inline void RtcpStatistics::set_fraction_lost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fraction_lost_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.RtcpStatistics.fraction_lost)
}

// optional uint32 cumulative_lost = 2;
inline bool RtcpStatistics::has_cumulative_lost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtcpStatistics::clear_cumulative_lost() {
  cumulative_lost_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtcpStatistics::cumulative_lost() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.RtcpStatistics.cumulative_lost)
  return cumulative_lost_;
}
inline void RtcpStatistics::set_cumulative_lost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cumulative_lost_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.RtcpStatistics.cumulative_lost)
}

// optional uint32 extended_max_sequence_number = 3;
inline bool RtcpStatistics::has_extended_max_sequence_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtcpStatistics::clear_extended_max_sequence_number() {
  extended_max_sequence_number_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtcpStatistics::extended_max_sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.RtcpStatistics.extended_max_sequence_number)
  return extended_max_sequence_number_;
}
inline void RtcpStatistics::set_extended_max_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  extended_max_sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.RtcpStatistics.extended_max_sequence_number)
}

// optional uint32 jitter = 4;
inline bool RtcpStatistics::has_jitter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtcpStatistics::clear_jitter() {
  jitter_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtcpStatistics::jitter() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.RtcpStatistics.jitter)
  return jitter_;
}
inline void RtcpStatistics::set_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  jitter_ = value;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.RtcpStatistics.jitter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace neteq_unittest
}  // namespace webrtc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_neteq_5funittest_2eproto
